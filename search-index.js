var searchIndex = JSON.parse('{\
"vodozemac":{"doc":"A Rust implementation of Olm and Megolm","t":"NNNNENDDNENNDDDDNNNNNNNNEDSSSENNNNNEDNNNDNNNEHNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDENDDDDDNNNDNNDDEENNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDNEDDNNNDENNNNNEDNNDDDDEDDNLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDNDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Base64","Base64","Base64","Base64","Base64DecodeError","Base64Error","Curve25519PublicKey","Curve25519SecretKey","Decode","DecodeError","Decryption","Decryption","Ed25519Keypair","Ed25519PublicKey","Ed25519SecretKey","Ed25519Signature","InvalidByte","InvalidKey","InvalidKeyLength","InvalidLastSymbol","InvalidLength","InvalidMacLength","InvalidSession","InvalidVersion","KeyError","KeyId","LENGTH","LENGTH","LENGTH","LibolmPickleError","MessageTooShort","MessageType","MissingVersion","MissingVersion","NonContributoryKey","PickleError","ProtoBufDecodeError","ProtoBufError","PublicKey","Serialization","SharedSecret","Signature","Signature","Signature","SignatureError","VERSION","Version","as_bytes","as_bytes","as_bytes","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","decode","default","default","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","diffie_hellman","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_base64","from_base64","from_base64","from_base64","from_bytes","from_slice","from_slice","from_slice","from_slice","from_slice","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","megolm","new","new","new","olm","partial_cmp","provide","provide","provide","provide","provide","provide","provide","public_key","public_key","sas","serialize","serialize","serialize","serialize","serialize","serialize","sign","sign","source","source","source","source","source","to_base64","to_base64","to_base64","to_base64","to_base64","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","was_contributory","zeroize","Base64","Better","DecryptedMessage","DecryptionError","Equal","ExportedSessionKey","GroupSession","GroupSessionPickle","InboundGroupSession","InboundGroupSessionPickle","InvalidMAC","InvalidMACLength","InvalidPadding","MegolmMessage","PublicKey","Read","SessionConfig","SessionKey","SessionKeyDecodeError","SessionOrdering","Signature","Signature","Unconnected","UnknownMessageIndex","Version","Worse","advance_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compare","connected","decrypt","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","encrypt","encrypt","encrypt","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","export_at","export_at_first_known_index","first_known_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_base64","from_base64","from_base64","from_bytes","from_bytes","from_bytes","from_encrypted","from_encrypted","from_libolm_pickle","from_libolm_pickle","from_pickle","from_pickle","import","into","into","into","into","into","into","into","into","into","into","into","into","mac","merge","message_index","message_index","message_index","new","new","pickle","pickle","plaintext","provide","provide","serialize","serialize","serialize","serialize","serialize","serialize","session_config","session_id","session_id","session_key","signature","source","source","to_base64","to_base64","to_base64","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version_1","version_2","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","Account","AccountPickle","Decryption","DecryptionError","IdentityKeys","InboundCreationResult","InvalidMAC","InvalidMACLength","InvalidPadding","Message","MessageType","MismatchedIdentityKey","MissingMessageKey","MissingOneTimeKey","Normal","Normal","OlmMessage","OneTimeKeyGenerationResult","PreKey","PreKey","PreKeyMessage","RatchetPublicKey","Session","SessionConfig","SessionCreationError","SessionKeys","SessionPickle","TooBigMessageGap","as_ref","base_key","base_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_index","ciphertext","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_inbound_session","create_outbound_session","created","curve25519","curve25519_key","decode","decrypt","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","ed25519","ed25519_key","encrypt","encrypt","encrypt","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fallback_key","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget_fallback_key","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_base64","from_base64","from_bytes","from_bytes","from_encrypted","from_encrypted","from_libolm_pickle","from_libolm_pickle","from_parts","from_pickle","from_pickle","generate_fallback_key","generate_one_time_keys","has_received_message","identity_key","identity_key","identity_keys","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mac_truncated","mark_keys_as_published","max_number_of_one_time_keys","message","message","message_type","new","one_time_key","one_time_key","one_time_keys","pickle","pickle","plaintext","provide","provide","ratchet_key","removed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","session","session_config","session_id","session_id","session_id","session_keys","session_keys","sign","source","source","stored_one_time_key_count","to_base64","to_base64","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_parts","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version_1","version_2","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EstablishedSas","InvalidCount","Mac","Mac","Sas","SasBytes","SasError","as_bytes","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes_raw","calculate_mac","calculate_mac_invalid_base64","clone","clone","clone_into","clone_into","decimals","default","diffie_hellman","diffie_hellman_with_raw","emoji_indices","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_base64","from_slice","into","into","into","into","into","into","new","our_public_key","provide","provide","public_key","source","their_public_key","to_base64","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify_mac","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"vodozemac"],[323,"vodozemac::megolm"],[564,"vodozemac::olm"],[882,"vodozemac::sas"]],"d":["The signature wasn’t valid base64.","The pickle wasn’t valid base64.","The pickle wasn’t valid base64.","The message wasn’t valid base64.","Errors that can occur while decoding.","","Struct representing a Curve25519 public key.","Struct representing a Curve25519 secret key.","The payload of the pickle could not be decoded.","Error type describing the different ways message decoding …","The encrypted pickle could not have been decrypted.","The pickle could not have been decrypted.","A struct collecting both a public, and a secret, Ed25519 …","An Ed25519 public key, used to verify digital signatures.","An Ed25519 secret key, used to create digital signatures.","An Ed25519 digital signature, can be used to verify the …","An invalid byte was found in the input. The offset and …","An embedded public key couldn’t be decoded.","","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid. A typical cause of …","The embedded message authentication code couldn’t be …","The pickle does not contain a valid receiving or sending …","The message has a unsupported version.","Error type describing failures that can happen when we try …","","The number of bytes a Curve25519 public key has.","The number of bytes a Ed25519 public key has.","The number of bytes a Ed25519 signature has.","Error type describing the various ways libolm pickles can …","The message doesn’t have enough data to be correctly …","The Olm message has an invalid type.","The pickle is missing a valid version.","The message is missing a valid version.","At least one of the keys did not have contributory …","Error type describing the various ways Vodozemac pickles …","A Protobuf message decoding error.","The message couldn’t be decoded as a valid protocol …","The pickle contains an invalid public key.","The serialized Vodozemac object couldn’t be deserialzied.","The result of a Diffie-Hellman key exchange.","The signature failed to be verified.","","An embedded signature couldn’t be decoded.","Error type describing signature verification failures.","The version of vodozemac that is being used.","The pickle has a unsupported version.","View this shared secret key as a byte array.","View this public key as a byte array.","Get the byte representation of the secret key.","View this public key as a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform a Diffie-Hellman key exchange between the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Instantiate a Curve25519 public key from an unpadded base64","Try to create a <code>Ed25519SecretKey</code> from a base64 encoded …","Instantiate a Ed25519PublicKey public key from an unpadded …","Try to create a <code>Ed25519Signature</code> from an unpadded base64 …","Create a <code>Curve25519PublicKey</code> from a byte array.","Create a <code>Curve25519SecretKey</code> from the given slice of bytes.","Try to create a <code>Curve25519PublicKey</code> from a slice of bytes.","Try to create a <code>Ed25519SecretKey</code> from a slice of bytes.","Try to create a <code>Ed25519PublicKey</code> from a slice of bytes.","Try to create a <code>Ed25519Signature</code> from a slice of bytes.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An implementation of the Megolm ratchet.","Generate a new, random, Curve25519SecretKey.","Create a new, random, <code>Ed25519Keypair</code>.","Create a new random <code>Ed25519SecretKey</code>.","An implementation of the Olm double ratchet.","","","","","","","","","Get the public Ed25519 key of this keypair.","Get the public key that matches this <code>Ed25519SecretKey</code>.","User-friendly key verification using short authentication …","","","","","","","Sign the given message with our secret key.","Sign the given slice of bytes with this <code>Ed25519SecretKey</code>.","","","","","","Serialize a Curve25519 public key to an unpadded base64 …","Convert the secret key to a base64 encoded string.","Serialize a Ed25519PublicKey public key to an unpadded …","Serialize an <code>Ed25519Signature</code> to an unpadded base64 …","","Convert this shared secret to a byte array.","Convert the <code>Curve25519SecretKey</code> to a byte array.","Convert this public key to a byte array.","Convert the <code>Ed25519Signature</code> to a byte array.","","","","","","","","","","","","","","","","","","","Convert the public key to a vector of bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify that the provided signature for a given message has …","","","","","","","","","","","","","","","","Ensure in constant-time that this shared secret did not …","","The encoded session key wasn’t valid base64.","The first session has a better initial message index than …","","Error type for Megolm-based decryption failuers.","The sessions are the same.","The exported session key.","A Megolm group session represents a single sending …","A format suitable for serialization which implements …","","A format suitable for serialization which implements …","The message authentication code of the message was invalid.","The length of the message authentication code of the …","The ciphertext of the message isn’t padded correctly.","An encrypted Megolm message.","The encoded session key contains an invalid public key.","The encoded session key didn’t contain enough data to be …","A struct to configure how Megolm sessions should work …","The session key, can be used to create a …","Error type describing failure modes for the <code>SessionKey</code> and …","The result of a comparison between two <code>InboundGroupSession</code> …","The signature on the message was invalid.","The signature on the session key was invalid.","The sessions are not the same, they can’t be compared.","The session is missing the correct message key to decrypt …","The encoded session key had a unsupported version.","The first session has a worse initial message index than …","Permanently advance the session to the given index.","","","","","","","","","","","","","","","","","","","","","","","","","The actual ciphertext of the message.","","","","","","","","","Compare the <code>InboundGroupSession</code> with the given other …","Check if two <code>InboundGroupSession</code>s are the same.","","","","","","","","","","","","","Encrypt the <code>plaintext</code> with the group session.","Serialize and encrypt the pickle using the given key.","Serialize and encrypt the pickle using the given key.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Deserialize the <code>ExportedSessionKey</code> from base64 encoded …","Deserialize the <code>SessionKey</code> from base64 encoded string.","Try to decode the given string as a <code>MegolmMessage</code>.","Deserialize the <code>ExportedSessionKey</code> from a byte slice.","Deserialize the <code>SessionKey</code> from a byte slice.","Try to decode the given byte slice as a <code>MegolmMessage</code>.","Obtain a pickle from a ciphertext by decrypting and …","Obtain a pickle from a ciphertext by decrypting and …","","","Restore a <code>GroupSession</code> from a previously saved …","Restore an <code>InboundGroupSession</code> from a previously saved …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the megolm message’s mac.","Merge the session with the given other session, picking …","Return the current message index.","The index of the message that was used when the message …","","Construct a new group session, with a random ratchet state …","","Convert the group session into a struct which implements …","Convert the inbound group session into a struct which …","","","","","","","","","","","Returns the globally unique session ID, in base64-encoded …","","Export the group session into a session key.","Get a reference to the megolm message’s signature.","","","Serialize the <code>ExportedSessionKey</code> to a base64 encoded …","Serialize the <code>SessionKey</code> to a base64 encoded string.","Encode the <code>MegolmMessage</code> as a string.","Serialize the <code>ExportedSessionKey</code> to a byte vector.","Serialize the <code>SessionKey</code> to a byte vector.","Encode the <code>MegolmMessage</code> as an array of bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the numeric version of this <code>SessionConfig</code>.","Create a <code>SessionConfig</code> for the Megolm version 1. This …","Create a <code>SessionConfig</code> for the Megolm version 2. This …","","","","","","","","","","","","","","","An Olm account manages all cryptographic keys used on a …","A format suitable for serialization which implements …","The pre-key message that was used to establish the Session …","Error type for Olm-based decryption failuers.","Struct holding the two public identity keys of an <code>Account</code>.","Return type for the creation of inbound <code>Session</code> objects.","The message authentication code of the message was invalid.","The length of the message authentication code of the …","The ciphertext of the message isn’t padded correctly.","An encrypted Olm message.","An enum over the two supported message types.","The pre-key message contains a curve25519 identity key …","The session is missing the correct message key to decrypt …","The pre-key message contained an unknown one-time key. …","A normal message, contains only the ciphertext and …","The normal message type.","Enum over the different Olm message types.","The result type for the one-time key generation operation.","A pre-key message, contains metadata to establish a <code>Session</code>…","The pre-key message type.","An encrypted Olm pre-key message.","","An Olm session represents one end of an encrypted …","A struct to configure how Olm sessions should work under …","Error describing failure modes when creating a Olm Session …","The set of keys that were used to establish the Olm …","A format suitable for serialization which implements …","Too many messages have been skipped to attempt decrypting …","","The base key, a single use key that was created just in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The index of the chain that was used when the message was …","The actual ciphertext of the message.","","","","","","","","","","","","","","","","","Create a <code>Session</code> from the given pre-key message and …","Create a <code>Session</code> with the given identity key and one-time …","The public part of the one-time keys that were newly …","The curve25519 key, used for to establish shared secrets.","Get a reference to the account’s public Curve25519 key","","Try to decrypt an Olm message, which will either return …","","","","","","","","","","","The ed25519 key, used for signing.","Get a reference to the account’s public Ed25519 key","Encrypt the <code>plaintext</code> and construct an <code>OlmMessage</code>.","Serialize and encrypt the pickle using the given key.","Serialize and encrypt the pickle using the given key.","","","","","","","","","","","","","","","","","Get the currently unpublished fallback key.","","","","","","","","","","","","","","","The <code>Account</code> stores at most two private parts of the …","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to decode the given string as a Olm <code>Message</code>.","Try to decode the given string as a Olm <code>PreKeyMessage</code>.","Try to decode the given byte slice as a Olm <code>Message</code>.","Try to decode the given byte slice as a Olm <code>Message</code>.","Obtain a pickle from a ciphertext by decrypting and …","Obtain a pickle from a ciphertext by decrypting and …","Create an <code>Account</code> object by unpickling an account pickle …","Create a <code>Session</code> object by unpickling a session pickle in …","Create a <code>OlmMessage</code> from a message type and a ciphertext.","Restore an <code>Account</code> from a previously saved <code>AccountPickle</code>.","Restore a <code>Session</code> from a previously saved <code>SessionPickle</code>.","Generate a single new fallback key.","Generates the supplied number of one time keys. Returns …","Have we ever received and decrypted a message from the …","The long term identity key of the sender of the message. …","","Get the IdentityKeys of this Account","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Has the MAC been truncated in this Olm message.","Mark all currently unpublished one-time and fallback keys …","Get the maximum number of one-time keys the client should …","The actual message that contains the ciphertext.","Get the message as a byte array.","Get the type of the message.","Create a new Account with new random identity keys.","The single-use key that was uploaded to a public key …","","Get the currently unpublished one-time keys.","Convert the account into a struct which implements …","Convert the session into a struct which implements …","The plaintext of the pre-key message.","","","The public part of the ratchet key, that was used when the …","The public part of the one-time keys that had to be …","","","","","","","","","The <code>Session</code> that was created from a pre-key message.","","Returns the globally unique session ID, in base64-encoded …","Returns the globally unique session ID, in base64-encoded …","Returns the globally unique session ID which these …","Get the keys associated with this session.","The collection of all keys required for establishing an …","Sign the given message using our Ed25519 fingerprint key.","","","","Encode the <code>Message</code> as a string.","Encode the <code>PreKeyMessage</code> as a string.","Encode the <code>Message</code> as an array of bytes.","Encode the <code>PreKeyMessage</code> as an array of bytes.","","","","","","","","","Convert the <code>OlmMessage</code> into a message type, and base64 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version of the Olm message.","Get the numeric version of this <code>SessionConfig</code>.","Create a <code>SessionConfig</code> for the Olm version 1. This version …","Create a <code>SessionConfig</code> for the Olm version 2. This version …","","","","","","","","","","","","","","","","","A struct representing a short auth string verification …","Error type for the case when we try to generate too many …","The output type for the SAS MAC calculation.","The MAC failed to be validated.","A struct representing a short auth string verification …","Bytes generated from an shared secret that can be used as …","Error type describing failures that can happen during the …","Get the byte slice of the MAC.","Get the raw bytes of the short auth string that can be …","","","","","","","","","","","","","Generate <code>SasBytes</code> using HKDF with the shared secret as the …","Generate the given number of bytes using HKDF with the …","Calculate a MAC for the given input using the info string …","Calculate a MAC for the given input using the info string …","","","","","Get the three decimal numbers that can be presented to …","","Establishes a SAS secret by performing a DH handshake with …","Establishes a SAS secret by performing a DH handshake with …","Get the index of 7 emojis that can be presented to users …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Create a new <code>Mac</code> object from a base64 encoded string.","Create a new <code>Mac</code> object from a byte slice.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new random verification object","Get the public key that was created by us, that was used …","","","Get the public key that can be used to establish a shared …","","Get the public key that was created by the other party, …","Convert the MAC to a base64 encoded string.","","","","","","","","","","","","","","","","","","","","","","","Verify a MAC that was previously created using the …","","","","","",""],"i":[25,27,28,29,0,26,0,0,28,0,27,28,0,0,0,0,7,29,26,7,7,29,28,29,0,0,4,6,13,0,29,29,28,29,26,0,0,29,28,27,0,25,26,29,0,0,28,1,4,5,6,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,7,7,10,11,4,12,6,13,14,7,10,11,4,12,6,13,14,14,4,11,12,5,7,11,4,12,5,6,14,11,7,10,4,6,13,14,7,10,4,6,13,14,7,7,10,10,4,4,25,25,6,6,13,13,14,26,26,27,27,28,28,29,29,1,7,10,11,4,4,4,4,4,25,25,25,12,5,6,13,14,26,26,26,27,27,27,28,28,28,28,29,29,29,29,29,4,5,6,13,4,11,4,5,6,13,4,14,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,0,11,12,5,0,14,7,10,25,26,27,28,29,12,5,0,11,4,12,5,6,14,12,5,25,26,27,28,29,4,5,6,13,14,1,11,4,13,7,10,11,4,12,6,13,14,7,10,4,25,6,13,26,27,28,29,4,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,6,1,7,10,11,4,25,12,5,6,13,14,26,27,28,29,1,1,54,44,0,0,44,0,0,0,0,0,47,47,47,0,54,54,0,0,0,0,47,54,44,47,54,44,41,48,49,50,51,44,47,41,45,52,43,46,54,48,49,50,51,44,47,41,45,52,43,46,54,43,44,45,43,46,44,45,43,46,41,41,41,48,46,49,50,51,41,52,43,46,49,50,48,51,52,44,45,43,46,44,45,43,46,41,41,41,44,47,47,45,43,46,54,54,48,48,49,50,51,44,47,47,47,47,41,41,41,45,52,52,43,46,54,54,54,54,54,49,50,43,49,50,43,51,52,48,41,48,41,41,48,49,50,51,44,47,41,45,52,43,46,54,43,41,48,43,45,48,41,48,41,45,47,54,49,50,51,52,43,46,48,48,41,48,43,47,54,49,50,43,49,50,43,44,45,43,46,47,54,48,49,49,49,50,50,50,51,44,47,41,45,52,43,43,43,43,46,54,48,49,50,51,44,47,41,45,52,43,46,54,48,49,50,51,44,47,41,45,52,43,46,54,46,46,46,48,49,50,51,44,47,41,45,52,43,46,54,49,50,0,0,69,0,0,0,71,71,71,0,0,69,71,69,63,64,0,0,63,64,0,0,0,0,0,0,0,71,58,59,66,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,60,60,62,60,59,63,64,58,65,66,62,60,59,63,64,58,65,66,67,67,76,62,67,66,70,67,65,62,72,60,59,63,73,65,66,62,67,70,72,73,62,60,59,63,64,58,65,66,62,60,59,63,64,58,65,66,67,70,69,69,62,68,60,59,63,64,58,71,71,65,66,67,76,67,67,70,70,69,69,62,68,72,60,59,63,63,63,64,58,58,71,71,71,73,65,66,60,59,60,59,72,73,67,70,63,67,70,67,67,70,59,66,67,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,60,67,67,59,63,63,67,59,66,67,67,70,68,69,71,60,76,62,72,60,59,63,73,65,66,68,70,70,59,66,70,59,67,69,71,67,60,59,60,59,62,60,59,63,64,58,65,66,63,69,71,76,67,70,69,62,68,72,60,60,60,60,59,59,59,59,63,64,64,58,71,73,65,66,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,60,65,65,65,76,67,70,69,62,68,72,60,59,63,64,58,71,73,65,66,0,0,0,82,0,0,0,77,78,77,81,79,80,82,78,77,81,79,80,82,78,79,79,79,79,80,78,80,78,78,81,81,81,78,78,78,79,80,80,82,82,78,77,81,79,80,82,82,78,77,77,77,81,79,80,82,78,81,79,80,82,81,82,79,77,80,78,80,82,77,81,79,80,82,78,77,81,79,80,82,78,77,81,79,80,82,78,79,77,81,79,80,82,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,[[3,[2]]]],[5,[[3,[2]]]],[6,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[9,[8]]]],[7,7],[10,10],[11,11],[4,4],[12,12],[6,6],[13,13],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,14],15],[16,[[18,[4,17]]]],[[],11],[[],12],[[],5],[7,19],[20,[[18,[11]]]],[20,[[18,[4]]]],[20,[[18,[12]]]],[20,[[18,[5]]]],[20,[[18,[6]]]],[20,[[18,[14]]]],[[11,4],1],[[7,7],21],[[10,10],21],[[4,4],21],[[6,6],21],[[13,13],21],[[14,14],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[7,22],[[18,[23]]]],[[7,22],[[18,[23]]]],[[10,22],[[18,[23]]]],[[10,22],[[18,[23]]]],[[4,22],24],[[4,22],24],[[25,22],24],[[25,22],24],[[6,22],24],[[6,22],24],[[13,22],24],[[13,22],24],[[14,22],24],[[26,22],24],[[26,22],24],[[27,22],24],[[27,22],24],[[28,22],24],[[28,22],24],[[29,22],24],[[29,22],24],[[]],[[]],[[]],[[]],[11,4],[[]],[30,4],[[[3,[2]]],4],[31,4],[32,25],[7,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,26],[25,26],[33,27],[[]],[7,27],[26,28],[7,28],[[]],[17,28],[26,29],[7,29],[25,29],[[]],[10,29],[19,[[18,[4,26]]]],[19,[[18,[5,26]]]],[19,[[18,[6,26]]]],[19,[[18,[13,25]]]],[[[3,[2]]],4],[[[3,[2]]],11],[[[34,[2]]],[[18,[4,26]]]],[[[34,[2]]],[[18,[5,26]]]],[[[34,[2]]],[[18,[6,26]]]],[[[34,[2]]],[[18,[13,25]]]],[[4,35]],[[14,35]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],12],[[],5],0,[[14,14],[[9,[15]]]],[36],[36],[36],[36],[36],[36],[36],[12,6],[5,6],0,[[11,37],18],[[4,37],18],[[12,37],18],[[5,37],18],[[6,37],18],[[14,37],18],[[12,[34,[2]]],13],[[5,[34,[2]]],13],[25,[[9,[8]]]],[26,[[9,[8]]]],[27,[[9,[8]]]],[28,[[9,[8]]]],[29,[[9,[8]]]],[4,38],[5,38],[6,38],[13,38],[14,38],[1,[[3,[2]]]],[11,[[3,[2]]]],[4,[[3,[2]]]],[13,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[4,[[39,[2]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[6,[34,[2]],13],[[18,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,21],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[41,42],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[34,[2]]]],[44,44],[45,45],[43,43],[46,46],[[]],[[]],[[]],[[]],[[41,41],44],[[41,41],21],[[41,43],[[18,[45,47]]]],[[],48],[[],46],[20,[[18,[49]]]],[20,[[18,[50]]]],[20,[[18,[51]]]],[20,[[18,[41]]]],[20,[[18,[52]]]],[20,[[18,[43]]]],[20,[[18,[46]]]],[49],[50],[[48,[53,[[34,[2]]]]],43],[[51,[3,[2]]],38],[[52,[3,[2]]],38],[[44,44],21],[[45,45],21],[[43,43],21],[[46,46],21],[[],21],[[],21],[[],21],[[],21],[[41,42],[[9,[49]]]],[41,49],[41,42],[[44,22],24],[[47,22],24],[[47,22],24],[[45,22],24],[[43,22],24],[[46,22],24],[[54,22],24],[[54,22],24],[[]],[51,48],[[]],[[]],[[]],[[]],[55,47],[56,47],[25,47],[[]],[[]],[48,41],[52,41],[[]],[[]],[41,52],[[]],[[]],[[]],[25,54],[7,54],[57,54],[26,54],[19,[[18,[49,54]]]],[19,[[18,[50,54]]]],[19,[[18,[43,29]]]],[[[34,[2]]],[[18,[49,54]]]],[[[34,[2]]],[[18,[50,54]]]],[[[34,[2]]],[[18,[43,29]]]],[[19,[3,[2]]],[[18,[51,27]]]],[[19,[3,[2]]],[[18,[52,27]]]],[[19,[34,[2]]],[[18,[48,28]]]],[[19,[34,[2]]],[[18,[41,28]]]],[51,48],[52,41],[[49,46],41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[34,[2]]]],[[41,41],[[9,[41]]]],[48,42],[43,42],0,[46,48],[[50,46],41],[48,51],[41,52],0,[36],[36],[[49,37],18],[[50,37],18],[[51,37],18],[[52,37],18],[[43,37],18],[[46,37],18],[48,46],[48,38],[41,38],[48,50],[43,13],[47,[[9,[8]]]],[54,[[9,[8]]]],[49,38],[50,38],[43,38],[49,[[39,[2]]]],[50,[[39,[2]]]],[43,[[39,[2]]]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],18],[[],18],[19,[[18,[49]]]],[[[34,[2]]],[[18,[49]]]],[[[34,[2]]],[[18,[50]]]],[19,[[18,[50]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[39,[2]]],[[18,[43]]]],[[[34,[2]]],[[18,[43]]]],[19,[[18,[43]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[46,2],[[],46],[[],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49],[50],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[58,4],[59,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,61],[60,[[34,[2]]]],[62,62],[60,60],[59,59],[63,63],[64,64],[58,58],[65,65],[66,66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,4,59],[[18,[68,69]]]],[[67,65,4,4],70],0,0,[67,4],[16,[[18,[66,17]]]],[[70,63],[[18,[[39,[2]],71]]]],[[],67],[[],65],[20,[[18,[62]]]],[20,[[18,[72]]]],[20,[[18,[60]]]],[20,[[18,[59]]]],[20,[[18,[63]]]],[20,[[18,[73]]]],[20,[[18,[65]]]],[20,[[18,[66]]]],0,[67,6],[[70,[53,[[34,[2]]]]],63],[[72,[3,[2]]],38],[[73,[3,[2]]],38],[[62,62],21],[[60,60],21],[[59,59],21],[[63,63],21],[[64,64],21],[[58,58],21],[[65,65],21],[[66,66],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[67,[[74,[14,4]]]],[[70,22],24],[[69,22],24],[[69,22],24],[[62,22],24],[[68,22],24],[[60,22],24],[[59,22],24],[[63,22],24],[[64,22],24],[[58,22],24],[[71,22],24],[[71,22],24],[[65,22],24],[[66,22],24],[67,21],[[]],[72,67],[[]],[73,70],[[]],[[]],[71,69],[[]],[[]],[[]],[[]],[[]],[[]],[59,63],[60,63],[[]],[[]],[[[3,[2]]],58],[55,71],[[]],[56,71],[[]],[[]],[[]],[19,[[18,[60,29]]]],[19,[[18,[59,29]]]],[[[34,[2]]],[[18,[60,29]]]],[[[34,[2]]],[[18,[59,29]]]],[[19,[3,[2]]],[[18,[72,27]]]],[[19,[3,[2]]],[[18,[73,27]]]],[[19,[34,[2]]],[[18,[67,28]]]],[[19,[34,[2]]],[[18,[70,28]]]],[[75,19],[[18,[63,29]]]],[72,67],[73,70],[67,[[9,[4]]]],[[67,75],76],[70,21],[59,4],0,[67,62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,21],[67],[67,75],[59,60],[63,[[34,[2]]]],[63,64],[[],67],[59,4],0,[67,[[74,[14,4]]]],[67,72],[70,73],0,[36],[36],[60,4],0,[[62,37],18],[[72,37],18],[[60,37],18],[[59,37],18],[[63,37],18],[[73,37],18],[[65,37],18],[[66,37],18],0,[70,65],[70,38],[59,38],[66,38],[70,66],[59,66],[[67,19],13],[69,[[9,[8]]]],[71,[[9,[8]]]],[67,75],[60,38],[59,38],[60,[[39,[2]]]],[59,[[39,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63],[[],38],[[],38],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[34,[2]]],[[18,[60]]]],[19,[[18,[60]]]],[[],18],[[[39,[2]]],[[18,[60]]]],[[[39,[2]]],[[18,[59]]]],[[],18],[19,[[18,[59]]]],[[[34,[2]]],[[18,[59]]]],[[],18],[75,[[18,[64]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[60,2],[65,2],[[],65],[[],65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[77,[[34,[2]]]],[78,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,19],78],[[79,19,75],[[18,[[39,[2]],80]]]],[[79,19,19],77],[[79,19,19],38],[80,80],[78,78],[[]],[[]],[78],[[],81],[[81,4],[[18,[79,26]]]],[[81,19],[[18,[79,26]]]],[78,[[3,[2]]]],[[78,78],21],[[],21],[[79,22],24],[[80,22],24],[[80,22],24],[[82,22],24],[[82,22],24],[[78,22],24],[[]],[[]],[[]],[[]],[[]],[55,82],[[]],[19,[[18,[77,7]]]],[[[34,[2]]],77],[[]],[[]],[[]],[[]],[[]],[[]],[[],81],[79,4],[36],[36],[81,4],[82,[[9,[8]]]],[79,4],[77,38],[[]],[[]],[[],38],[[],38],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[79,19,19,77],[[18,[82]]]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"SharedSecret"],[15,"u8"],[15,"array"],[3,"Curve25519PublicKey"],[3,"Ed25519SecretKey"],[3,"Ed25519PublicKey"],[4,"Base64DecodeError"],[8,"Error"],[4,"Option"],[3,"ProtoBufDecodeError"],[3,"Curve25519SecretKey"],[3,"Ed25519Keypair"],[3,"Ed25519Signature"],[3,"KeyId"],[4,"Ordering"],[8,"Read"],[4,"DecodeError"],[4,"Result"],[15,"str"],[8,"Deserializer"],[15,"bool"],[3,"Formatter"],[3,"Error"],[6,"Result"],[4,"SignatureError"],[4,"KeyError"],[4,"PickleError"],[4,"LibolmPickleError"],[4,"DecodeError"],[3,"EphemeralSecret"],[3,"ReusableSecret"],[6,"SignatureError"],[3,"Error"],[15,"slice"],[8,"Hasher"],[3,"Demand"],[8,"Serializer"],[3,"String"],[3,"Vec"],[3,"TypeId"],[3,"InboundGroupSession"],[15,"u32"],[3,"MegolmMessage"],[4,"SessionOrdering"],[3,"DecryptedMessage"],[3,"SessionConfig"],[4,"DecryptionError"],[3,"GroupSession"],[3,"ExportedSessionKey"],[3,"SessionKey"],[3,"GroupSessionPickle"],[3,"InboundGroupSessionPickle"],[8,"AsRef"],[4,"SessionKeyDecodeError"],[3,"MacError"],[3,"UnpadError"],[3,"Error"],[3,"RatchetPublicKey"],[3,"PreKeyMessage"],[3,"Message"],[15,"u64"],[3,"IdentityKeys"],[4,"OlmMessage"],[4,"MessageType"],[3,"SessionConfig"],[3,"SessionKeys"],[3,"Account"],[3,"InboundCreationResult"],[4,"SessionCreationError"],[3,"Session"],[4,"DecryptionError"],[3,"AccountPickle"],[3,"SessionPickle"],[3,"HashMap"],[15,"usize"],[3,"OneTimeKeyGenerationResult"],[3,"Mac"],[3,"SasBytes"],[3,"EstablishedSas"],[3,"InvalidCount"],[3,"Sas"],[4,"SasError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
